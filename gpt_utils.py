import inspect
from inspect import Parameter
from pydantic import create_model
from openai import OpenAI

SYS_PROMPT = """You are a chess grandmaster who is helping the user understand a chess position. You are presented with information about the board position and should use that information to answer any questions the user may have.
Assess the board, identify captures and checks available, identify strategic goals and tactical opportunities and present the user with an answer to their question while keeping in mind your assessment of the position.
The user input has been appended with ### followed by a description generated by a chess engine. This description is for your reference when helping the user. Do not mention engine evaluations, as they are only for your reference. Instead, try to explain by words, if you decide to talk about advantages.
Always aim to keep your answers brief."""

client = OpenAI()

def askgpt(user, model, chess_prompt, msgs=None, system=SYS_PROMPT, max_tokens=None, **kwargs):
    msgs_in = []
    if msgs is not None:
        msgs_in = [i for i in msgs]
    if system: msgs_in.append({"role": "system", "content": SYS_PROMPT})
    prompt = user + f"\n### {chess_prompt}"
    msgs_in.append({"role": "user", "content": prompt})
    result = client.chat.completions.create(model=model, messages=msgs_in, max_tokens=max_tokens, **kwargs)
    history = msgs_in + [{"role": "assistant", "content": result.choices[0].message.content}]
    return result, history

def cost(c, model_name):
    price_in = 0.01 if model_name == 'gpt-4-1106-preview' else 0.001 #FIXME: This changes over time, maybe API provides this?
    price_out = 0.03 if model_name == 'gpt-4-1106-preview' else 0.003
    return c.usage.completion_tokens * price_out / 1000 + c.usage.prompt_tokens * price_in / 1000

def schema(f):
    kw = {}
    for name, param in inspect.signature(f).parameters.items():
        # Use a string representation for non-serializable types
        if param.annotation not in [int, float, str, bool]:
            annotation = str
        else:
            annotation = param.annotation

        kw[name] = (annotation, ... if param.default == Parameter.empty else param.default)

    s = create_model(f'Input for `{f.__name__}`', **kw).model_json_schema()
    return dict(name=f.__name__, description=f.__doc__, parameters=s)

